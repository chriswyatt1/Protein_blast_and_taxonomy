nextflow.enable.dsl = 2

manifest {
  description = 'Creating a blast and taxonomy script for proteins' 
  author = 'Chris Wyatt'
}

profiles {
  myriad {
    includeConfig 'conf/myriad.config'
  }
  docker {
    includeConfig 'conf/docker.config'
  }
  cscluster {
    includeConfig 'conf/cscluster.config'
  }
  apptainer {
    apptainer.enabled        = true
    // Set where singularity cached images are saved
    apptainer.cacheDir       = "apptainer/cachedir"
    // set registry to quay.io
    //apptainer.registry       = "quay.io"
    // Ensure other container engines are unset
    docker.enabled           = false
    singularity.enabled      = false
  }
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'


// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

params {
    max_cpus = 4 // or any valid integer
    max_memory = '32 GB'
}
